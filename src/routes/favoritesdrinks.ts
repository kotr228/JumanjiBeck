// routes/favorites.ts
import express from 'express';
import pool from '../config/db';

const router = express.Router();

// ‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö
router.post('/add', async (req, res) => {
  const { userId, dishId } = req.body;

  try {
    await pool.promise().query(
      'INSERT INTO favoritesdrinks (user_id, drinks_id) VALUES (?, ?)',
      [userId, dishId]
    );
    res.status(201).json({ message: '–°—Ç—Ä–∞–≤–∞ –¥–æ–¥–∞–Ω–∞ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö' });
  } catch (err: any) {
    if (err.code === 'ER_DUP_ENTRY') {
      return res.status(400).json({ message: '–í–∂–µ –≤ —É–ª—é–±–ª–µ–Ω–∏—Ö' });
    }
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤ —É–ª—é–±–ª–µ–Ω—ñ:', err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö
router.post('/remove', async (req, res) => {
  const { userId, dishId } = req.body;

  try {
    await pool.promise().query(
      'DELETE FROM favoritesdrinks WHERE user_id = ? AND drinks_id = ?',
      [userId, dishId]
    );
    res.json({ message: '–°—Ç—Ä–∞–≤—É –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö' });
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö:', err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üìã –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —É–ª—é–±–ª–µ–Ω—ñ —Å—Ç—Ä–∞–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.get('/:userId', async (req, res) => {
  const { userId } = req.params;

  try {
    const [rows] = await pool.promise().query(
      `SELECT d.* 
       FROM favoritesdrinks f
       JOIN BarMenuFood  d ON f.drinks_id = d.id
       WHERE f.user_id = ?`,
      [userId]
    );
    res.json(rows);
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —É–ª—é–±–ª–µ–Ω–∏—Ö:', err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;
