import express from 'express';
import pool from '../config/db2'; // —Ç–≤–æ—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL

const router = express.Router();

/**
 * ‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Å—Ç—ñ–ª
 * POST /api/tables
 */
router.post('', async (req, res) => {
  const { table_number, seats, location, is_vip } = req.body;

  if (!table_number || !seats) {
    return res.status(400).json({ message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª—É —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å' });
  }

  try {
    const [result] = await pool.execute(
      'INSERT INTO tables (table_number, seats, location, is_vip) VALUES (?, ?, ?, ?)',
      [table_number, seats, location || null, is_vip || false]
    );

    res.status(201).json({
      message: '–°—Ç—ñ–ª —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ',
      table_id: (result as any).insertId,
    });
  } catch (error: any) {
    if (error.code === 'ER_DUP_ENTRY') {
      return res.status(409).json({ message: '–°—Ç—ñ–ª –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤–∂–µ —ñ—Å–Ω—É—î' });
    }
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error });
  }
});

/**
 * ‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–æ–ª—É
 * PUT /api/tables/:id
 */
router.put('/:id', async (req, res) => {
  const tableId = req.params.id;
  const { table_number, seats, location, is_vip, is_active } = req.body;

  try {
    const [result] = await pool.execute(
      `UPDATE tables 
       SET table_number = ?, seats = ?, location = ?, is_vip = ?, is_active = ?
       WHERE id = ?`,
      [table_number, seats, location || null, is_vip || false, is_active ?? true, tableId]
    );

    res.json({ message: '–°—Ç—ñ–ª –æ–Ω–æ–≤–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–æ–ª—É:', error);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—ñ–ª
 * DELETE /api/tables/:id
 */
router.delete('/:id', async (req, res) => {
  const tableId = req.params.id;

  try {
    const [result] = await pool.execute('DELETE FROM tables WHERE id = ?', [tableId]);

    res.json({ message: '–°—Ç—ñ–ª –≤–∏–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å—Ç–æ–ª—É:', error);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Å—Ç–æ–ª—ñ–≤
 * GET /api/tables
 */
router.get('', async (_req, res) => {
  try {
    const [rows] = await pool.execute('SELECT * FROM tables ORDER BY table_number');
    res.json(rows);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —Å—Ç–æ–ª—ñ–≤:', error);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;
